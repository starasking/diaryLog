2022-02
==========

fingertip model 代码阅读
***************************

\*.sh
---------------

.. code-block:: bash

        #!/usr/bin/env bash
        model_root_path="./models/train-palm-spoofing/20220206"
        log_dir="${model_root_path}/logs"
        log="${log_dir}/log"
        mkdir -p "${log_dir}"

        python -u train.py \
        --datasets \
        /path/to/train/dataset_1 \
        /path/to/train/dataset_2 \
        --validation_dataset \
        /path/to/validation/dataset_1 \
        /path/to/validation/dataset_2 \
        --net \
        RFB \
        --cuda_index \
        0 \
        2>&1 | tee "$log"

.. code-block:: bash

   2>&1 | tee "$log"

import
---------------------

.. code-block:: python

   # alphabetical order
   import argparse
   import itertools
   import logging
   import numpy as np
   import os
   import sys

   import torch
   from torch import nn
   from torch.optim.lr_scheduler import CosineAnnealingLR, MultiStepLR
   from torch.utils.data import DataLoader, ConcatDataset

   from vision.datasets.finger_dataset import FingerDataset

   parser = argparse.ArgumentParser(description = 'train with pytorch')
   parser.add_argument("--datasets", nargs = "+", help = "Dataset directory path")

   args = parser.parse_args()
   input_img_size = args.input_size
   logging.info("input size : {}".format(input_img_size))

   def train(loader, net, criterion, optimizer, device):
        net.train(True)
        for i, data in enumerate(loader):
                images, points, lables, ener
                ...

   train_dataset = ConcatDataset(datasets)
   train_loader = DataLoader(train_dataset, args.batch_size, num_workers, shuffer=True)


.. code-block:: python
   
   """
   Dataset for 

   Copyright (c)
   """




libraries & functions
-----------------------

1. :code:`logging` in python and in C++
2. 定义 :code:`global` 变量。
3. :code:`enumerate`
4. :code:`np.newaxis`

global in python
--------------------------

In Python, :code:`global` keyword allows you to modify the variable outside the current scope.
It is used to created a global variable and make changes to the varivable in a local context.

**Rules of global keyword**

The basic rules for :code:`global` keyword in python are:

- When we create a variable inside a function, it is local by default
- When we define a variable outside of a function, it is global by default.
  You don't have to use :code:`global` keyword.
- We use :code:`global` keyword to read and write a global variable inside a function.
- Use of :code:`global` keyword outside a function has no effect.
- In Python, we create a single module :code:`config.py` to hold global variables
  and share information across Python modules within the same program.


Numpy
***************************

mAP
--------------------------

AP (Average Precision) is a popular metric in measuring the accuracy of object detection.
Average precision computes the average precision value for recall value over 0 to 1.

The general definition for the Average Precision (AP) is finding the area under the precision-recall curve.

**Precision** measures how accurate is your predictions. i.e.,
the percentage of your predictions are correct.
It is a measure of "when your model predicts how often does it predicts correctly?"
It indicates how much we can rely on the model's positive predictions.

**Recall** measures how good you find all the positives.
It is a measure of "has your model predicted every time that it should have predicteded?"
It indicates any predictions that it should not have missed if the model is missing.

high recall but low precision (实际没病说成有病，实际有病的都能检测出来，错检)
high precision but low recall (实际有病的没检测处理，实际没病的都说没病，漏检)

AUC (Area Under the Curve) covers the area underneath the precision-recall curve.

.. math::

   & Precision = \frac{TP}{TP + FP} \\
   & Recall = \frac{TP}{TP + FN} \\
   & F_1 = 2 \times \frac{Precision \times Recall}{Precision + Recall} \\
   & AUC = \int_0^1 prec(rec) d(rec)


mAP: mean Average Precision, is the average of AP.
In some context, we compute the AP for each class and average them.

Mean Average Precision (mAP) is a metric used to evaluate object detection models.

The mean of average precision values are calculated over recall values from 0 to 1.
mAP is commonly used to analyze the performance of
object detection and segmentation systems.

Many object detection algorithms use mAP to evaluate their models.
The mAP is also used across several benchmark challenges such as Pascal, VOC, COCO, etc.

.. image:: map.png


Intersection over Union (IoU)
.. math::

        IoU = \frac{Area of Overlap}{Area of Union}

Mean Average Precision is the average of AP of each class.

mAP incorporates the trade-off between precision and recall and considers
both false positives (FP) and false negatives (FN).


AP is one way of calculating the area under the 



Templates in C++
***************************

What is templates in C++?
--------------------------

Templates in C++ is defined as a blueprint or formula for creating a generic class or a function.
To simply put, you can create a single function or single class to work with different data types using templates.

C++ template is also known as generic functions or classes which is a very powerful feature in C++.
A keyword "template" in C++ is used for the template's syntax and angled bracket in a parameter(s),
which defines the data type variable.

A template is a simple and yet very powerful tool in C++.
The simple idea is to pass data type as a parameter so that we don't need to write the same code for different data types.

C++ adds two new keywords to support templates: 'template' and 'typename'.
The second keyword can always be replaced by keyword 'class'.

How do templates work in C++?
------------------------------

Templates in C++ works in such a way that it gets expanded at compiler time, just like macros,
and allows a function or class to work on different data types without being rewritten.

Templates are expanded at compiler time.
The difference is, the compiler does type checking before template expansion.
The idea is simple, source code contains only function/class,
but compiled code may contain multiple copies of the same function/class.

Types of Templates in C++
--------------------------

There are two types of templates in C++

- Function templates
- Class templates

What is the function template in C++?
--------------------------------------------

Function template in C++ is a single function template that works with multiple data types simultaneously,
but a standard function works only with one set of data types.


.. code::

   using namespace std;
   template <class X>
   X func(X a, X b) {
        return (a > b? a: b);
   }

The class keyword is used to specify a generic type in a template declaration.

What is class template in C++?
--------------------------------------------

The class template in C++ is like function templates.
They are known as generic templates.
They define a family of classes in C++.

A class template starts with the keyword :code:`template` followed by template parameter(s)
inside :code:`<>` which is followed by the class declaration.

.. code::

   template <class T>
   class className {
   private:
           T var;
           ...
   public:
           T func(T arg);
           ...
   };

In the above declaration, :code:`T` is the template argument which is a placeholder for the data type used,
and :code:`class` is a keyword.

Inside the class body, a member variable :code:`var` and a member function :code:`func()` are both of type :code:`T`.

Class Templates like function templates, class templates are useful
when a class defines something that is independent of the data type.
Can be useful for classes like linkedList, BinaryTree, Stack, Queue, Array, etc.

The relationship between a class template and an individual class is like the relationship between a class and individual object.
An individual class defines how a group of objects can be constructed, while a class template defines how a group of classes can be generated.

Creating a Class Template Object
--------------------------------------------

Once we've declared and defined a class template, we can create its objects in other classes or functions
(such as the :code:`main()` function) with the following syntax

.. code::

   className<dataType> classObject;

For example:

.. code::

   className<int> classObject;
   className<float> classObject;
   className<string> classObject;

How do templates work in c++?
--------------------------------------------

Templates are expanded compiler time. This is like macros.
The difference is, the compiler does type checking before template expansion.
The idea is simple, source code contains only function/class, but compiled code may contain multiple copies of same function/class.


Function templates
--------------------------------------------

Function templates are special functions that can operate with *generic types*.
This allows us to create a function template whose functionality can be adapted to more than one type or class
without repeating the entire code for each type.

In C++ this can be achieved using *template parameters*

In C++ this can be achieved using *template parameters*.
A template parameter is a special kind of parameter that can be used to pass a type as argument:
just like regular function parameters can be used to pass values to a function,
template parameters allow to pass also types to a function.
These function templates can use these parameters as if they were any other regular type.

The format for declaring function templates with type parameters is:

.. code::
   
   template <class identifier> function_declaration;
   template <typename identifier> function_declaration;

The only difference between both prototypes is the use of either the keyword :code:`class` or the keyword :code:`typename`.
Its use is indistinct, since both expressions have exactly the same meaning and behave exactly the same way.:118

Can there be more than one arguments to tmeplates?
-----------------------------------------------------

Yes, like normal parameters, we can pass more than one data types as arguments to templates.

.. code::

   using namespace std;
   template < class T, class U>
   class A {
        T x;
        U y;
   public:
        A() {
                cout << "Constructor Called" << endl;
        }
   }

   int main() {
        A <char, char> a;
        A <int, double> b;
        return 0;
   }

Git commands
***************************

To delete a local branch in Git, you simply run

.. code-block:: bash

   git branch -d <branch-name>

If the branch contains unmerged changes, though, Git will refuse to delete it.
If you're sure you want to do it, you'll have to force the deletion by replacing 
the -d parameter with uppercase D:

.. code-block:: bash

   git branch -D <branch-name>

You don't use the git branch command to delete a remote branch.
You use :code:`git push`

.. code-block:: bash

   git push --delete <remote name> <branch name>

Difference between Concurrency and Palallelism
************************************************

**Concurrency:**

Concurrency relates to an application that is processing more than one task at the same time.
Concurrency is an approach that is used for decreasing the response time of the system
by using the single processing unit.

python -u
************************************************

In python, if we use :code:`print()` function to display text,
stdout will save the text in a buffer, then display it on the screen.
However, if you use python -u, code:`print()` will make stdout (our screen) display string text directly.
